<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>XWiki</web>
<name>AuthenticateFacebook</name>
<language></language>
<defaultLanguage>fr</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.JeromeVelociter</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1301587974000</creationDate>
<date>1306510341000</date>
<contentUpdateDate>1306510341000</contentUpdateDate>
<version>22.2</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>true</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.RequiredRightClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<level>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>level</name>
<number>1</number>
<picker>0</picker>
<prettyName>level</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<sort>none</sort>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<values>edit|programming</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</level>
</class>
<name>XWiki.AuthenticateFacebook</name>
<number>0</number>
<className>XWiki.RequiredRightClass</className>
<guid>6dc26620-87a8-4330-b172-1bac6c398b21</guid>
<property>
<level>programming</level>
</property>
</object>
<content>{{groovy}}
import net.sf.json.groovy.JsonSlurper
import org.apache.commons.httpclient.HttpClient
import org.apache.commons.configuration.PropertiesConfiguration
import java.net.URL

if (xcontext.user == 'XWiki.XWikiGuest') {

  def app_secret;
  def setup_ok = false;
  def debug = false;

  def fb_config     = xwiki.getDocument('XWiki.FacebookConfiguration').getObject('XWiki.FacebookConfigurationClass')
  def app_id        = fb_config.getProperty('appId').value
  def scope         = fb_config.getProperty('scope').value
  def auto_register = fb_config.getProperty('registration_strategy').value == 'auto'


  try {
    // First, try getting the app secret from xwiki.properties file (safer setup)
    // 
    def xwikiPropertiesUrl = com.xpn.xwiki.web.Utils.getComponent(org.xwiki.container.Container.class).getApplicationContext().getResource("/WEB-INF/xwiki.properties");
    def xwikiProperties = new PropertiesConfiguration(xwikiPropertiesUrl)
    app_secret = xwikiProperties.getProperty('facebook.secret')
  }
  catch(Exception e) {
    // Go on ; maybe the secret is in XWiki.XWikiPreferences
  }

  if (!app_secret) {
     app_secret = fb_config.getProperty('secret').value
  }


  if (debug) {
    println "App secret : " + app_secret
    println "----"
  }

  if (!request.error &amp;&amp; !request.code) {
    def url = "https://www.facebook.com/dialog/oauth?client_id=" + app_id + "&amp;redirect_uri=" + doc.getExternalURL('view', "xredirect=" + request.xredirect ? request.xredirect : '')
    if (scope &amp;&amp; scope != '') {
      url += ("scope=" + scope)
    }

  println """
{{html wiki=false}}
&lt;script&gt;
top.location.href='${url}'
&lt;/script&gt;
{{/html}}
"""

  } else {
    
    if (request.code) {
  
      if (debug) {
        println "Received code : " + request.code
        println "----"
      }

      def token_url = "https://graph.facebook.com/oauth/access_token?client_id=" + app_id + "&amp;client_secret=" + app_secret + "&amp;code=" + request.code + "&amp;redirect_uri=" + doc.getExternalURL('view');

      if (debug) {
        println "token URL :" + token_url
        println "----"
      }

      try {
        def access_token = new URL(token_url).openConnection().content.text

        if (debug) {
          println "Access token : " + access_token
          println "----"
        }

        def graph_url = "https://graph.facebook.com/me?" + access_token

        if (debug) {
          println "Graph URL : " + graph_url
          println "----"
        }

        def slurper = new JsonSlurper()
        def json = new URL(graph_url).openConnection().content.text
        def user = slurper.parseText(json);

        id = user.get('id')
        def found = xwiki.searchDocuments(", BaseObject as obj, StringProperty as fbid where obj.className='XWiki.XWikiUsers' and obj.name=doc.fullName and fbid.id.id=obj.id and fbid.id.name='fbid' and fbid.value='"+id+"'")

        def userDoc
        def password

        if (found.size() &gt; 0) {
          userDoc = xwiki.getDocument(found.get(0))
        } 
        else {
          if (auto_register) {
            def userDocName
            if (user.get('username') &amp;&amp; user.get('username') != '') {
              userDocName = xwiki.getUniquePageName("XWiki", user.get('username'))
            }
            else {
              userDocName = xwiki.getUniquePageName("XWiki", user.get('first_name') + user.get('last_name'))
            }

            if (debug) {
              println "User doc name : " + userDocName
              println "----"
            }

            password = xwiki.generateRandomString(16)

            def propMap = [:]
            propMap.put("active", "1")
            propMap.put("email", user.get('email'))
            propMap.put("first_name", user.get('first_name'))
            propMap.put("last_name", user.get('last_name'))
            propMap.put("fb_id", user.get('id'))
            propMap.put("password", password)
            propMap.put("password_cache", password)
            if (user.get('username') &amp;&amp; user.get('username') != '') {
              propMap.put("fb_username", user.get('username'))
            }

            if (debug){
              println user
              println "----"
              println propMap
            }
            else {
              xwiki.@xwiki.createUser(userDocName, propMap, xcontext.@context)
            }
            userDoc = xwiki.getDocument("XWiki." + userDocName)
          }
          else {
  //          response.sendRedirect(xwiki.getURL('XWiki.RegisterFacebook', 'view', 'fromlogin=1'))
          }
        }
        if (userDoc &amp;&amp; !debug) {
          userDoc.use('XWiki.XWikiUsers')
          if (!password) {
            password = userDoc.getObject('XWiki.XWikiUsers').getProperty('password_cache').value
          }
          def xwikiAuthenticator = xwiki.@xwiki.getAuthService().@authenticators.get('xwiki')
          def psm = xwikiAuthenticator.@persistentLoginManager
          psm.rememberLogin(request, response, userDoc.fullName, password)
          if (!request.xredirect) {
            response.sendRedirect(xwiki.getURL('Main.WebHome', 'view'))
          }
          else {
            response.sendRedirect(request.xredirect)
          }
        }
      }
      catch(Exception e) {
e.printStackTrace()
    println """
{{error}}
${e.message}
{{/error}}
"""
      }
    }
    else {
      println
"""
{{error}}
${request.error}
{{/error}}
"""
    }
  }

}

else {
  println """
{{info}}
You are already identified.
{{/info}}
"""
}
{{/groovy}}</content></xwikidoc>
